// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// log_b
double log_b(double x, int& base);
RcppExport SEXP _NWTMasterSample_log_b(SEXP xSEXP, SEXP baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int& >::type base(baseSEXP);
    rcpp_result_gen = Rcpp::wrap(log_b(x, base));
    return rcpp_result_gen;
END_RCPP
}
// HaltonSeq
NumericVector HaltonSeq(const int& k, double& base, int& n);
RcppExport SEXP _NWTMasterSample_HaltonSeq(SEXP kSEXP, SEXP baseSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< double& >::type base(baseSEXP);
    Rcpp::traits::input_parameter< int& >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(HaltonSeq(k, base, n));
    return rcpp_result_gen;
END_RCPP
}
// GetBoxIndices
NumericMatrix GetBoxIndices(NumericMatrix& lxy, IntegerVector& base, IntegerVector J);
RcppExport SEXP _NWTMasterSample_GetBoxIndices(SEXP lxySEXP, SEXP baseSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type lxy(lxySEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type base(baseSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(GetBoxIndices(lxy, base, J));
    return rcpp_result_gen;
END_RCPP
}
// SolveCongruence
NumericVector SolveCongruence(NumericMatrix& A, NumericVector& base, NumericVector J);
RcppExport SEXP _NWTMasterSample_SolveCongruence(SEXP ASEXP, SEXP baseSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type base(baseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(SolveCongruence(A, base, J));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NWTMasterSample_log_b", (DL_FUNC) &_NWTMasterSample_log_b, 2},
    {"_NWTMasterSample_HaltonSeq", (DL_FUNC) &_NWTMasterSample_HaltonSeq, 3},
    {"_NWTMasterSample_GetBoxIndices", (DL_FUNC) &_NWTMasterSample_GetBoxIndices, 3},
    {"_NWTMasterSample_SolveCongruence", (DL_FUNC) &_NWTMasterSample_SolveCongruence, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_NWTMasterSample(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
